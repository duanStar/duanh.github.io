<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <subtitle>欢迎来到我的博客</subtitle>
  <link href="https://star2-lab.github.io/duanh.github.io/atom.xml" rel="self"/>
  
  <link href="https://star2-lab.github.io/duanh.github.io/"/>
  <updated>2021-05-04T02:50:57.767Z</updated>
  <id>https://star2-lab.github.io/duanh.github.io/</id>
  
  <author>
    <name>Duan Hongfei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue3动画</title>
    <link href="https://star2-lab.github.io/duanh.github.io/2021/05/04/vue3-dong-hua/"/>
    <id>https://star2-lab.github.io/duanh.github.io/2021/05/04/vue3-dong-hua/</id>
    <published>2021-05-04T02:13:53.000Z</published>
    <updated>2021-05-04T02:50:57.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3动画概述"><a href="#Vue3动画概述" class="headerlink" title="Vue3动画概述"></a>Vue3动画概述</h1><ul><li>在 CSS 和 JS 中，使用内置的 <code>&lt;transition&gt;</code> 组件来钩住组件中进入和离开 DOM。</li><li>过渡模式，以便你在过渡期间编排顺序。</li><li>在处理多个元素位置更新时，使用 <code>&lt;transition-group&gt;</code> 组件，通过 FLIP 技术来提高性能。</li><li>使用 <code>watchers</code> 来处理应用中不同状态的过渡。</li><li>基于class与style的动画</li></ul><h2 id="基于class的动画"><a href="#基于class的动画" class="headerlink" title="基于class的动画"></a>基于class的动画</h2><p>基于class的动画要配合css过渡与动画来激活动画，通过切换class实现动画效果,关于vue3中class的绑定语法可参考官网</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Push this button to do something you shouldn't be doing:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ shake: noActivated }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>noActivated <span class="token punctuation">=</span> true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>noActivated<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Oh no!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.shake</span> </span><span class="token punctuation">{</span>  <span class="token property">animation</span><span class="token punctuation">:</span> shake <span class="token number">0.82</span>s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span><span class="token number">0.36</span>, <span class="token number">0.07</span>, <span class="token number">0.19</span>, <span class="token number">0.97</span><span class="token punctuation">)</span> both<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> shake</span> <span class="token punctuation">{</span>  <span class="token selector">10%,  90% </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span>-<span class="token number">1</span>px, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">20%,  80% </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">2</span>px, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">30%,  50%,  70% </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span>-<span class="token number">4</span>px, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">40%,  60% </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">4</span>px, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Demo <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      noActivated<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>Demo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#demo'</span><span class="token punctuation">)</span></code></pre><h2 id="基于style的动画"><a href="#基于style的动画" class="headerlink" title="基于style的动画"></a>基于style的动画</h2><p>基于style的动画同样要配合css过渡与动画来激活动画，通过切换style实现动画效果,关于vue3中style的绑定语法可参考官网</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>    <span class="token attr-name">@mousemove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xCoordinate<span class="token punctuation">"</span></span>    <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span> <span class="token selector">backgroundColor: `hsl($</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span>, <span class="token number">80%</span>, <span class="token number">50%</span><span class="token punctuation">)</span>` <span class="token punctuation">}</span></span><span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movearea<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Move your mouse across the screen...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>x: {{x}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.movearea</span> </span><span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">0.2</span>s background-color ease<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Demo <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      x<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">xCoordinate</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>Demo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#demo'</span><span class="token punctuation">)</span></code></pre><h2 id="进入过渡-amp-离开过渡"><a href="#进入过渡-amp-离开过渡" class="headerlink" title="进入过渡 &amp; 离开过渡"></a>进入过渡 &amp; 离开过渡</h2><p>在插入、更新或从 DOM 中移除项时，Vue 提供了多种应用转换效果的方法。这包括以下工具：</p><ul><li>自动为 CSS 转换和动画应用 class；</li><li>集成第三方 CSS 动画库，例如 <a href="https://animate.style/">animate.css</a> ；</li><li>在过渡钩子期间使用 JavaScript 直接操作 DOM；</li><li>集成第三方 JavaScript 动画库。</li></ul><h3 id="单元素-组件的过渡"><a href="#单元素-组件的过渡" class="headerlink" title="单元素/组件的过渡"></a>单元素/组件的过渡</h3><p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡</p><ul><li>条件渲染 (使用 <code>v-if</code>)</li><li>条件展示 (使用 <code>v-show</code>)</li><li>动态组件</li><li>组件根节点</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show <span class="token punctuation">=</span> !show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Toggle  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Demo <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      show<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>Demo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#demo'</span><span class="token punctuation">)</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.fade-enter-active</span>,<span class="token class">.fade-leave-active</span> </span><span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span> opacity <span class="token number">0.5</span>s ease<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fade-enter-from</span>,<span class="token class">.fade-leave-to</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当插入或删除包含在 <code>transition</code> 组件中的元素时，Vue 将会做以下处理：</p><ol><li>自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名。</li><li>如果过渡组件提供了 <a href="https://vue3js.cn/docs/zh/guide/transitions-enterleave.html#javascript-hooks">JavaScript 钩子函数</a> ，这些钩子函数将在恰当的时机被调用。</li><li>如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作 (插入/删除) 在下一帧中立即执行。(注意：此指浏览器逐帧动画机制，和 Vue 的 <code>nextTick</code> 概念不同)</li></ol><h3 id="过渡class"><a href="#过渡class" class="headerlink" title="过渡class"></a>过渡class</h3><p>在进入/离开的过渡中，会有 6 个 class 切换。</p><ol><li><code>v-enter-from</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li><li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li><li><code>v-enter-to</code>：定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter-from</code> 被移除)，在过渡/动画完成之后移除。</li><li><code>v-leave-from</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li><code>v-leave-to</code>：离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave-from</code> 被删除)，在过渡/动画完成之后移除。</li></ol><p>这6个class中较为常用的就是<code>v-enter-active</code>和<code>v-leave-active</code>，</p><p>这两个class在动画过程几乎一直持续存在，因此动画的关键状态样式要写在这两个类中。</p><p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>&lt;transition&gt;</code>，则 <code>v-</code> 是这些class名的默认前缀。如果你使用了 <code>&lt;transition name="my-transition"&gt;</code>，那么 <code>v-enter-from</code>会替换为 <code>my-transition-enter-from</code>。</p><h3 id="自定义过渡-class-类名"><a href="#自定义过渡-class-类名" class="headerlink" title="自定义过渡 class 类名"></a>自定义过渡 class 类名</h3><p>我们可以通过以下 attribute 来自定义过渡类名：</p><ul><li><code>enter-from-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code></li><li><code>leave-from-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code></li></ul><p>他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 <a href="https://daneden.github.io/animate.css/">Animate.css</a>. 结合使用十分有用。</p><h3 id="同时使用过渡和动画"><a href="#同时使用过渡和动画" class="headerlink" title="同时使用过渡和动画"></a>同时使用过渡和动画</h3><p>在一些场景中，我们需要给同一个元素同时设置两种过渡动效，比如 animation 很快的被触发并完成了，而 transition 效果还没结束。在这种情况中，那我们该以谁的时间为准呢？这时就需要使用 <code>type</code> attribute 并设置 <code>animation</code> 或 <code>transition</code> 来明确声明你需要 Vue 监听的类型。告诉Vue以那类的时间为准。</p><h3 id="显性的过渡持续时间"><a href="#显性的过渡持续时间" class="headerlink" title="显性的过渡持续时间"></a>显性的过渡持续时间</h3><p>在很多情况下，Vue 可以自动得出过渡效果的完成时机。默认情况下，Vue 会等待其在过渡效果的根元素的第一个 <code>transitionend</code> 或 <code>animationend</code> 事件。然而也可以不这样设定——比如，我们可以拥有一个精心编排的一系列过渡效果，其中一些嵌套的内部元素相比于过渡效果的根元素有延迟的或更长的过渡效果。</p><p>在这种情况下你可以用 <code>&lt;transition&gt;</code> 组件上的 <code>duration</code> prop 定制一个显性的过渡持续时间 (以毫秒计)：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre><p>你也可以定制进入和移出的持续时间：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ enter: 500, leave: 800 }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre><h3 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a>JavaScript 钩子</h3><p>可以在 attribute 中声明 JavaScript 钩子</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>  <span class="token attr-name">@before-enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span>  <span class="token attr-name">@enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span>  <span class="token attr-name">@after-enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterEnter<span class="token punctuation">"</span></span>  <span class="token attr-name">@enter-cancelled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enterCancelled<span class="token punctuation">"</span></span>  <span class="token attr-name">@before-leave</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeLeave<span class="token punctuation">"</span></span>  <span class="token attr-name">@leave</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leave<span class="token punctuation">"</span></span>  <span class="token attr-name">@after-leave</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterLeave<span class="token punctuation">"</span></span>  <span class="token attr-name">@leave-cancelled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leaveCancelled<span class="token punctuation">"</span></span>  <span class="token attr-name">:css</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ...</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// --------</span>  <span class="token comment" spellcheck="true">// ENTERING</span>  <span class="token comment" spellcheck="true">// --------</span>  <span class="token function">beforeEnter</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 当与 CSS 结合使用时</span>  <span class="token comment" spellcheck="true">// 回调函数 done 是可选的</span>  <span class="token function">enter</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">afterEnter</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">enterCancelled</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// --------</span>  <span class="token comment" spellcheck="true">// 离开时</span>  <span class="token comment" spellcheck="true">// --------</span>  <span class="token function">beforeLeave</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 当与 CSS 结合使用时</span>  <span class="token comment" spellcheck="true">// 回调函数 done 是可选的</span>  <span class="token function">leave</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">afterLeave</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// leaveCancelled 只用于 v-show 中</span>  <span class="token function">leaveCancelled</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这些钩子函数可以结合 CSS transitions/animations 使用，也可以结合第三方动画库进行使用，也可以单独使用。</p><p>当只用 JavaScript 过渡的时候，在 <strong><code>enter</code> 和 <code>leave</code> 钩中必须使用 <code>done</code> 进行回调</strong>。否则，它们将被同步调用，过渡会立即完成。添加 <code>:css="false"</code>，也会让 Vue 会跳过 CSS 的检测，除了性能略高之外，这可以避免过渡过程中 CSS 规则的影响。</p><h3 id="初始渲染的过渡"><a href="#初始渲染的过渡" class="headerlink" title="初始渲染的过渡"></a>初始渲染的过渡</h3><p>可以通过 <code>appear</code> attribute 设置节点在初始渲染的过渡</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">appear</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre><h3 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h3><ul><li><code>in-out</code>: 新元素先进行过渡，完成之后当前元素过渡离开。</li><li><code>out-in</code>: 当前元素先进行过渡，完成之后新元素过渡进入。</li></ul><blockquote><p><strong>TIP</strong></p><p>很快就会发现 <code>out-in</code> 是你大多数时候想要的状态 </p></blockquote><hr><p>剩下的列表过渡和状态过渡将于下篇讲解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3动画概述&quot;&gt;&lt;a href=&quot;#Vue3动画概述&quot; class=&quot;headerlink&quot; title=&quot;Vue3动画概述&quot;&gt;&lt;/a&gt;Vue3动画概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在 CSS 和 JS 中，使用内置的 &lt;code&gt;&amp;lt;transition&amp;</summary>
      
    
    
    
    <category term="Vue3" scheme="https://star2-lab.github.io/duanh.github.io/categories/Vue3/"/>
    
    
    <category term="Vue3" scheme="https://star2-lab.github.io/duanh.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://star2-lab.github.io/duanh.github.io/2021/04/26/hello-world/"/>
    <id>https://star2-lab.github.io/duanh.github.io/2021/04/26/hello-world/</id>
    <published>2021-04-26T07:10:21.000Z</published>
    <updated>2021-04-27T09:10:46.698Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code>$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code>$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code>$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code>$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Markdown" scheme="https://star2-lab.github.io/duanh.github.io/categories/Markdown/"/>
    
    
    <category term="Typora" scheme="https://star2-lab.github.io/duanh.github.io/tags/Typora/"/>
    
    <category term="Markdown" scheme="https://star2-lab.github.io/duanh.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
